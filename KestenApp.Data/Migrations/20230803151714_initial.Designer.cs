// <auto-generated />
using System;
using KestenApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KestenApp.Data.Migrations
{
    [DbContext(typeof(KestenDbContext))]
    [Migration("20230803151714_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KestenApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("09e77621-fac4-4150-b64c-3e5c2b1a40ee"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87412e5a-b4ab-4203-ba82-161ac50e2be2",
                            Email = "lubzdudz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUBZDUDZ@GMAIL.COM",
                            NormalizedUserName = "LUBZDUDZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnfOFelsDrScOxNpoPElDMbp7kxMndSWIDVnkHXK+aoxclyfpKYDqlC3EUX5fwpIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4d0238b-5c3d-4821-9fd6-0570812cec3f",
                            TwoFactorEnabled = false,
                            UserName = "lubzdudz@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("8a5f6807-b43f-40fa-b836-e21874e67d51"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96a0f511-8427-4404-8fe9-0b4918c0768c",
                            Email = "jn@chestnut.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JN@CHESTNUT.COM",
                            NormalizedUserName = "JN@CHESTNUT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENngTfrLQOFdth1ojyNErHvw+khGpBP/vP2GaPd60kUEGkXswJBB+x89zLLdy4hNQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6d978f3-d2c0-4ba8-a9bd-00307c5a12ab",
                            TwoFactorEnabled = false,
                            UserName = "jn@chestnut.com"
                        },
                        new
                        {
                            Id = new Guid("b0a8cb2c-4908-431e-a07b-f3ddd7b45bce"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab7594c8-0e8b-4d88-bcbf-825cabf3c2ef",
                            Email = "user@chestnut.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@CHESTNUT.COM",
                            NormalizedUserName = "USER@CHESTNUT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC/vsSWP+g/3Ra7Yo4kVkK87GdqAHFN2tuYYcdsd6V2VGNBJl6p89wd5XldIjZkkug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af3d73e3-415e-430a-9588-0909ddf81581",
                            TwoFactorEnabled = false,
                            UserName = "user@chestnut.com"
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.FruitSize", b =>
                {
                    b.Property<int>("FruitSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FruitSizeId"), 1L, 1);

                    b.Property<int?>("FruitsPerKgMax")
                        .HasColumnType("int");

                    b.Property<int?>("FruitsPerKgMin")
                        .HasColumnType("int");

                    b.Property<int?>("FruitsWeightMax")
                        .HasColumnType("int");

                    b.Property<int?>("FruitsWeightMin")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FruitSizeId");

                    b.ToTable("FruitSizes");

                    b.HasData(
                        new
                        {
                            FruitSizeId = 1,
                            Name = "Varying"
                        },
                        new
                        {
                            FruitSizeId = 2,
                            FruitsPerKgMax = 1000,
                            FruitsPerKgMin = 84,
                            FruitsWeightMax = 12,
                            FruitsWeightMin = 1,
                            Name = "Small"
                        },
                        new
                        {
                            FruitSizeId = 3,
                            FruitsPerKgMax = 83,
                            FruitsPerKgMin = 67,
                            FruitsWeightMax = 15,
                            FruitsWeightMin = 13,
                            Name = "Medium"
                        },
                        new
                        {
                            FruitSizeId = 4,
                            FruitsPerKgMax = 66,
                            FruitsPerKgMin = 56,
                            FruitsWeightMax = 18,
                            FruitsWeightMin = 16,
                            Name = "Large"
                        },
                        new
                        {
                            FruitSizeId = 5,
                            FruitsPerKgMax = 55,
                            FruitsPerKgMin = 15,
                            FruitsWeightMax = 100,
                            FruitsWeightMin = 18,
                            Name = "XL"
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.Garden", b =>
                {
                    b.Property<Guid>("GardenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TotalColumns")
                        .HasColumnType("int");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GardenId");

                    b.HasIndex("UserId");

                    b.ToTable("Gardens", (string)null);

                    b.HasData(
                        new
                        {
                            GardenId = new Guid("6cc4edb7-1110-43ab-8c16-5f245ebd118c"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPublished = true,
                            Name = "Sharp Mound",
                            TotalColumns = 12,
                            TotalRows = 8,
                            UserId = new Guid("09e77621-fac4-4150-b64c-3e5c2b1a40ee")
                        },
                        new
                        {
                            GardenId = new Guid("adbf158c-3126-4739-b59d-b6789a7a3bd6"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPublished = true,
                            Name = "Veslets G",
                            UserId = new Guid("09e77621-fac4-4150-b64c-3e5c2b1a40ee")
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.Species", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciesId"), 1L, 1);

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortLatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpeciesId");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            SpeciesId = 1,
                            CommonName = "European chestnut",
                            LatinName = "Castanea sativa",
                            ShortLatinName = "Sativa"
                        },
                        new
                        {
                            SpeciesId = 2,
                            CommonName = "Japanese chestnut",
                            LatinName = "Castanea crenata",
                            ShortLatinName = "Crenata"
                        },
                        new
                        {
                            SpeciesId = 3,
                            CommonName = "Chinese chestnut",
                            LatinName = "Castanea mollissima",
                            ShortLatinName = "Mollissima"
                        },
                        new
                        {
                            SpeciesId = 4,
                            CommonName = "American chestnut",
                            LatinName = "Castanea dentata",
                            ShortLatinName = "Dentata"
                        },
                        new
                        {
                            SpeciesId = 5,
                            CommonName = "Allegheny chinkapin",
                            LatinName = "Castanea pumila",
                            ShortLatinName = "Pumila"
                        },
                        new
                        {
                            SpeciesId = 6,
                            CommonName = "Ozark chinkapin",
                            LatinName = "Castanea ozarkensis",
                            ShortLatinName = "Ozarkensis"
                        },
                        new
                        {
                            SpeciesId = 7,
                            CommonName = "Chinese chinkapin",
                            LatinName = "Castanea henryi",
                            ShortLatinName = "Henryi"
                        },
                        new
                        {
                            SpeciesId = 8,
                            CommonName = "Seguin's chestnut",
                            LatinName = "Castanea seguinii",
                            ShortLatinName = "Seguinii"
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.Specimen", b =>
                {
                    b.Property<Guid>("SpecimenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("Elevation")
                        .HasPrecision(9, 6)
                        .HasColumnType("int");

                    b.Property<Guid>("GardenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("GraftedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlantedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SowedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VarietyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpecimenId");

                    b.HasIndex("GardenId");

                    b.HasIndex("UserId");

                    b.HasIndex("VarietyId");

                    b.ToTable("Specimens", (string)null);

                    b.HasData(
                        new
                        {
                            SpecimenId = new Guid("5ceeb8c1-9735-4c99-987e-22461216b9db"),
                            Column = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elevation = 642,
                            GardenId = new Guid("6cc4edb7-1110-43ab-8c16-5f245ebd118c"),
                            IsActive = true,
                            Name = "Marigoule 2019",
                            PlantedOnDate = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Row = 4,
                            UserId = new Guid("09e77621-fac4-4150-b64c-3e5c2b1a40ee"),
                            VarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d")
                        },
                        new
                        {
                            SpecimenId = new Guid("7eeeb5ea-4461-4bb4-95a6-fca45b7c69e6"),
                            Column = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elevation = 641,
                            GardenId = new Guid("6cc4edb7-1110-43ab-8c16-5f245ebd118c"),
                            IsActive = true,
                            Name = "Marsol 2022",
                            PlantedOnDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Row = 4,
                            UserId = new Guid("09e77621-fac4-4150-b64c-3e5c2b1a40ee"),
                            VarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d")
                        },
                        new
                        {
                            SpecimenId = new Guid("1d4c17b8-ac58-466d-828a-90eb59fa509b"),
                            Column = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elevation = 645,
                            GardenId = new Guid("6cc4edb7-1110-43ab-8c16-5f245ebd118c"),
                            IsActive = true,
                            Name = "Hifas 2019",
                            PlantedOnDate = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Row = 2,
                            UserId = new Guid("09e77621-fac4-4150-b64c-3e5c2b1a40ee"),
                            VarietyId = new Guid("a978c99b-40ed-4117-a0be-b0dd1df8f90b")
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.Variety", b =>
                {
                    b.Property<Guid>("VarietyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuddingPeriod")
                        .HasColumnType("int");

                    b.Property<int>("ChestnutBlightResistance")
                        .HasColumnType("int");

                    b.Property<int>("Conservation")
                        .HasColumnType("int");

                    b.Property<int>("Crop")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FloweringPeriod")
                        .HasColumnType("int");

                    b.Property<int>("InkDiseaseResistance")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMarron")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("MaturityPeriod")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Peeling")
                        .HasColumnType("int");

                    b.Property<int>("PollenType")
                        .HasColumnType("int");

                    b.Property<int>("Vigor")
                        .HasColumnType("int");

                    b.HasKey("VarietyId");

                    b.ToTable("Varieties", (string)null);

                    b.HasData(
                        new
                        {
                            VarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 3,
                            Conservation = 2,
                            Crop = 3,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bouche de Bétizac is a French chestnut cultivar developed in 1962 by INRA at the station of Malemort-sur-Corrèze near Brive. It is a controlled hybrid between Castanea sativa and Castanea crenata (female Bouche rouge × male Castanea crenata CA04). This variety produces large to very large chestnuts. It has very good flavor for a hybrid. With Marigoule, it is the variety currently most cultivated in the French chestnut groves because it is very productive (3 tons per hectare on average). Its fruit is bright, light chestnut-brown quickly turning brown and dark brown.",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 1,
                            IsActive = true,
                            IsMarron = true,
                            IsPublished = true,
                            MaturityPeriod = 2,
                            Name = "Bouche de Bétizac",
                            Peeling = 3,
                            PollenType = 1,
                            Vigor = 2
                        },
                        new
                        {
                            VarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 2,
                            Conservation = 3,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 1, 0, DateTimeKind.Unspecified),
                            Description = "Marigoule is the name of a french hybrid of chestnut (synonym M.15 or CA 15), cross between a European chestnut (Castanea sativa) and Japanese (Castanea crenata). In 1986, it originated from a Migoule orchard in Ussac in Corrèze. Marigoule (a contraction of Marron of Migoule) is a very tasty chestnut. It should be planted in rather low altitude in very sunny areas and protected from the wind (up to 300 m elevation for South-West orchard orientation or up to 400 m elevation in South-East orchard orientation). Otherwise its productivity remains small. In France, it is grown mainly South of the Dordogne and Lot-et-Garonne for the fresh market production because of the nuts beautiful appearance.",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 3,
                            IsActive = true,
                            IsMarron = true,
                            IsPublished = true,
                            MaturityPeriod = 3,
                            Name = "Marigoule",
                            Peeling = 3,
                            PollenType = 2,
                            Vigor = 3
                        },
                        new
                        {
                            VarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 3,
                            Conservation = 3,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 2, 0, DateTimeKind.Unspecified),
                            Description = "Marsol (aka Marisol) is a natural chestnut hybrid, a cross between a European chestnut (Castanea sativa) and Japanese (Castanea crenata) (CA 07). INRA produced this variety from Lalevade-d'Ardèche. It is mainly used as a rootstock because of its good graft compatibility with many varieties. As a rootstock, it is more vigorous than Maraval (equal to Bouche de Betizac or Comballe).",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 3,
                            IsActive = true,
                            IsMarron = true,
                            IsPublished = true,
                            MaturityPeriod = 3,
                            Name = "Marsol",
                            Peeling = 3,
                            PollenType = 3,
                            Vigor = 4
                        },
                        new
                        {
                            VarietyId = new Guid("1965231f-4461-4942-b358-c6b42a63bd92"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 1,
                            Conservation = 2,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 3, 0, DateTimeKind.Unspecified),
                            Description = "The Precoce Migoule is a chestnut hybrid (CA 48), a natural cross between a European chestnut (Castanea sativa) and a Japanese chestnut (Castanea crenata). It was discovered by J. Dufrenoy at the orchard of Migoule in Brive-la-Gaillarde. The tree is vigorous and erect growing with growth of a metre (3 ft) or more in a season if the conditions are right. It is a large sized chestnut tree with height reaching 20 m (60 ft) or more and 7.5-10 m (25-35 ft) wide. Trees start to bear after 3 to 5 years. Full nut production in 12 - 20 years depending on the location.",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 2,
                            IsActive = true,
                            IsMarron = true,
                            IsPublished = true,
                            MaturityPeriod = 2,
                            Name = "Précoce Migoule",
                            Peeling = 3,
                            PollenType = 2,
                            Vigor = 2
                        },
                        new
                        {
                            VarietyId = new Guid("a978c99b-40ed-4117-a0be-b0dd1df8f90b"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 2,
                            Conservation = 2,
                            Crop = 2,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 4, 0, DateTimeKind.Unspecified),
                            Description = "Resistant hybrid chestnut from Hifas Foresta.",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 3,
                            IsActive = true,
                            IsMarron = true,
                            IsPublished = true,
                            MaturityPeriod = 2,
                            Name = "Hifas",
                            Peeling = 2,
                            PollenType = 3,
                            Vigor = 4
                        },
                        new
                        {
                            VarietyId = new Guid("0a9568d9-e561-4d90-a8e1-1f267fcf8bea"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 5, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Pandora",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("4369597d-eb46-4688-a01c-356c7f431113"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 6, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Nevada",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("9fc5be47-8363-4a4f-b538-81d48f7b9a71"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 7, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Long Street",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("608e6081-9555-4426-900b-f658535502a2"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 8, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "AU 2-18",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("16a4fca4-64de-46a4-ba3a-26cf42a52fae"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 9, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "AU Super",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("7d6f6360-cb05-4940-86a5-31999b003b8c"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 10, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Black Satin",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("3bede629-4f08-4b4f-aab8-41aa14fff86a"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 11, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Chushuhong",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("89a9524a-df9e-4015-9183-6d1bfb8440db"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 12, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Emalyn's Purple",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("d8a10a01-e71b-417d-bea5-41cbe9c6e330"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 13, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Gideon",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("5d5f6fa1-5e5c-48a9-979b-af1e1cd2a495"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 14, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Jenny",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("1d4ef4fb-c803-428d-95f1-e99b50adf62a"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 15, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Jiaoza",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("c3604797-43f8-4acd-b0bc-5db7b49f3d8d"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 16, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Payne",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("56de247c-ea55-4530-bce5-897d1b2eb1b1"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 17, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Peach",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("00122506-b153-45ed-8c40-24122ea78bd1"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 18, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Qing",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("012a6a5f-ca63-4fe9-a0cb-fb55ceb202f5"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 19, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Qingza",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("a8e05eda-f67e-42a3-b083-64169b8527f4"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 20, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Royalmark",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("9f00b6a1-612c-49ef-9831-c8a6f5272e9d"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(2023, 7, 7, 7, 0, 21, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "YGF",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        },
                        new
                        {
                            VarietyId = new Guid("f4e4edcd-8547-409e-bb73-fc62a454f418"),
                            BuddingPeriod = 0,
                            ChestnutBlightResistance = 0,
                            Conservation = 0,
                            Crop = 0,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FloweringPeriod = 0,
                            InkDiseaseResistance = 0,
                            IsActive = true,
                            IsPublished = true,
                            MaturityPeriod = 0,
                            Name = "Yixian Large",
                            Peeling = 0,
                            PollenType = 0,
                            Vigor = 0
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietyFruitSize", b =>
                {
                    b.Property<Guid>("VarietyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FruitSizeId")
                        .HasColumnType("int");

                    b.HasKey("VarietyId", "FruitSizeId");

                    b.HasIndex("FruitSizeId");

                    b.ToTable("VarietyFruitSizes", (string)null);

                    b.HasData(
                        new
                        {
                            VarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77"),
                            FruitSizeId = 5
                        },
                        new
                        {
                            VarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d"),
                            FruitSizeId = 4
                        },
                        new
                        {
                            VarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d"),
                            FruitSizeId = 5
                        },
                        new
                        {
                            VarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d"),
                            FruitSizeId = 5
                        },
                        new
                        {
                            VarietyId = new Guid("1965231f-4461-4942-b358-c6b42a63bd92"),
                            FruitSizeId = 3
                        },
                        new
                        {
                            VarietyId = new Guid("1965231f-4461-4942-b358-c6b42a63bd92"),
                            FruitSizeId = 4
                        },
                        new
                        {
                            VarietyId = new Guid("a978c99b-40ed-4117-a0be-b0dd1df8f90b"),
                            FruitSizeId = 4
                        },
                        new
                        {
                            VarietyId = new Guid("a978c99b-40ed-4117-a0be-b0dd1df8f90b"),
                            FruitSizeId = 5
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietyGraftingCompatibility", b =>
                {
                    b.Property<Guid>("RootstockVarietyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GraftedVarietyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RootstockVarietyId", "GraftedVarietyId");

                    b.HasIndex("GraftedVarietyId");

                    b.ToTable("VarietyGrafting", (string)null);

                    b.HasData(
                        new
                        {
                            RootstockVarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d"),
                            GraftedVarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77")
                        },
                        new
                        {
                            RootstockVarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d"),
                            GraftedVarietyId = new Guid("1965231f-4461-4942-b358-c6b42a63bd92")
                        },
                        new
                        {
                            RootstockVarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d"),
                            GraftedVarietyId = new Guid("1965231f-4461-4942-b358-c6b42a63bd92")
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietyImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VarietyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageId");

                    b.HasIndex("VarietyId");

                    b.ToTable("VarietyImages", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("be9cca3d-4e9a-4e75-b813-9279f79f7f75"),
                            VarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77")
                        },
                        new
                        {
                            ImageId = new Guid("bf77ff2d-a488-4f6d-847b-3c880239a53f"),
                            VarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d")
                        },
                        new
                        {
                            ImageId = new Guid("ee93870c-a4ad-46f7-b5dc-f36ae12ed3a3"),
                            VarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d")
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietyPollenCompatibility", b =>
                {
                    b.Property<Guid>("PollenizerVarietyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetVarietyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PollenizerVarietyId", "TargetVarietyId");

                    b.HasIndex("TargetVarietyId");

                    b.ToTable("VarietyPollenizers", (string)null);

                    b.HasData(
                        new
                        {
                            PollenizerVarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d"),
                            TargetVarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77")
                        },
                        new
                        {
                            PollenizerVarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d"),
                            TargetVarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77")
                        },
                        new
                        {
                            PollenizerVarietyId = new Guid("1965231f-4461-4942-b358-c6b42a63bd92"),
                            TargetVarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77")
                        });
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietySpecies", b =>
                {
                    b.Property<Guid>("VarietyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("VarietyId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("VarietySpecies");

                    b.HasData(
                        new
                        {
                            VarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77"),
                            SpeciesId = 1
                        },
                        new
                        {
                            VarietyId = new Guid("46bd8dc8-ca0a-4648-a9a9-ea4ad91e1b77"),
                            SpeciesId = 2
                        },
                        new
                        {
                            VarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d"),
                            SpeciesId = 1
                        },
                        new
                        {
                            VarietyId = new Guid("fba92871-4a3c-4978-fcd6-08db87b43c2d"),
                            SpeciesId = 2
                        },
                        new
                        {
                            VarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d"),
                            SpeciesId = 1
                        },
                        new
                        {
                            VarietyId = new Guid("8fc8f311-3ce9-42e2-fcd7-08db87b43c2d"),
                            SpeciesId = 2
                        },
                        new
                        {
                            VarietyId = new Guid("1965231f-4461-4942-b358-c6b42a63bd92"),
                            SpeciesId = 1
                        },
                        new
                        {
                            VarietyId = new Guid("1965231f-4461-4942-b358-c6b42a63bd92"),
                            SpeciesId = 2
                        },
                        new
                        {
                            VarietyId = new Guid("0a9568d9-e561-4d90-a8e1-1f267fcf8bea"),
                            SpeciesId = 3
                        },
                        new
                        {
                            VarietyId = new Guid("0a9568d9-e561-4d90-a8e1-1f267fcf8bea"),
                            SpeciesId = 8
                        },
                        new
                        {
                            VarietyId = new Guid("a978c99b-40ed-4117-a0be-b0dd1df8f90b"),
                            SpeciesId = 1
                        },
                        new
                        {
                            VarietyId = new Guid("a978c99b-40ed-4117-a0be-b0dd1df8f90b"),
                            SpeciesId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "b191bc53-3825-46c2-b415-c8644f0fe1f8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "d5f69ee0-0c07-48a5-aa06-d84dc2ff2f8a",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "43d5b5ed-1d01-4653-b92c-c214e81957a6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KestenApp.Data.Models.Garden", b =>
                {
                    b.HasOne("KestenApp.Data.Models.ApplicationUser", "User")
                        .WithMany("Gardens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KestenApp.Data.Models.Specimen", b =>
                {
                    b.HasOne("KestenApp.Data.Models.Garden", "Garden")
                        .WithMany("Specimens")
                        .HasForeignKey("GardenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KestenApp.Data.Models.ApplicationUser", "User")
                        .WithMany("Specimens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KestenApp.Data.Models.Variety", "Variety")
                        .WithMany("Specimens")
                        .HasForeignKey("VarietyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Garden");

                    b.Navigation("User");

                    b.Navigation("Variety");
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietyFruitSize", b =>
                {
                    b.HasOne("KestenApp.Data.Models.FruitSize", "FruitSize")
                        .WithMany("Varieties")
                        .HasForeignKey("FruitSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KestenApp.Data.Models.Variety", "Variety")
                        .WithMany("FruitSizes")
                        .HasForeignKey("VarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FruitSize");

                    b.Navigation("Variety");
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietyGraftingCompatibility", b =>
                {
                    b.HasOne("KestenApp.Data.Models.Variety", "GraftedVariety")
                        .WithMany("IsGraftedOn")
                        .HasForeignKey("GraftedVarietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KestenApp.Data.Models.Variety", "RootstockVariety")
                        .WithMany("IsRootstockFor")
                        .HasForeignKey("RootstockVarietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GraftedVariety");

                    b.Navigation("RootstockVariety");
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietyImage", b =>
                {
                    b.HasOne("KestenApp.Data.Models.Variety", "Variety")
                        .WithMany("VarietyImages")
                        .HasForeignKey("VarietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Variety");
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietyPollenCompatibility", b =>
                {
                    b.HasOne("KestenApp.Data.Models.Variety", "PollenizerVariety")
                        .WithMany("IsPollenizerFor")
                        .HasForeignKey("PollenizerVarietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KestenApp.Data.Models.Variety", "TargetVariety")
                        .WithMany("IsPollenizedBy")
                        .HasForeignKey("TargetVarietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PollenizerVariety");

                    b.Navigation("TargetVariety");
                });

            modelBuilder.Entity("KestenApp.Data.Models.VarietySpecies", b =>
                {
                    b.HasOne("KestenApp.Data.Models.Species", "Species")
                        .WithMany("Varieties")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KestenApp.Data.Models.Variety", "Variety")
                        .WithMany("Species")
                        .HasForeignKey("VarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");

                    b.Navigation("Variety");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("KestenApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("KestenApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KestenApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("KestenApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KestenApp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Gardens");

                    b.Navigation("Specimens");
                });

            modelBuilder.Entity("KestenApp.Data.Models.FruitSize", b =>
                {
                    b.Navigation("Varieties");
                });

            modelBuilder.Entity("KestenApp.Data.Models.Garden", b =>
                {
                    b.Navigation("Specimens");
                });

            modelBuilder.Entity("KestenApp.Data.Models.Species", b =>
                {
                    b.Navigation("Varieties");
                });

            modelBuilder.Entity("KestenApp.Data.Models.Variety", b =>
                {
                    b.Navigation("FruitSizes");

                    b.Navigation("IsGraftedOn");

                    b.Navigation("IsPollenizedBy");

                    b.Navigation("IsPollenizerFor");

                    b.Navigation("IsRootstockFor");

                    b.Navigation("Species");

                    b.Navigation("Specimens");

                    b.Navigation("VarietyImages");
                });
#pragma warning restore 612, 618
        }
    }
}
